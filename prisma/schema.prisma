// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  bio           String?
  location      String?
  languages     String[]
  verified      Boolean   @default(false)
  credits       Int       @default(0)
  rating        Float     @default(0)
  totalRatings  Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  itineraries   Itinerary[]
  packages      Package[]
  bookings      Booking[]
  reviews       Review[]
  givenReviews  Review[]  @relation("ReviewAuthor")
  messages      Message[]
  conversations ConversationParticipant[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Itinerary {
  id          String   @id @default(cuid())
  title       String
  description String
  destination String
  duration    Int      // days
  price       Float
  category    TravelCategory
  difficulty  String   // easy, moderate, hard
  groupSize   Int
  included    String[] // what's included
  excluded    String[] // what's not included
  highlights  String[]
  images      String[]
  coordinates Json?    // lat, lng for destinations
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  bookings    Booking[]
  reviews     Review[]
  dayPlans    DayPlan[]

  @@map("itineraries")
}

model Package {
  id          String   @id @default(cuid())
  title       String
  description String
  location    String
  type        PackageType
  price       Float
  duration    Int      // hours
  maxPeople   Int
  minPeople   Int      @default(1)
  included    String[]
  images      String[]
  coordinates Json?    // lat, lng
  available   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  providerId  String
  provider    User       @relation(fields: [providerId], references: [id])
  bookings    Booking[]
  reviews     Review[]

  @@map("packages")
}

model DayPlan {
  id           String @id @default(cuid())
  day          Int
  title        String
  description  String
  activities   Json[] // array of activities with time, location, description
  meals        Json[] // breakfast, lunch, dinner info
  accommodation Json? // hotel/lodging info

  // Relations
  itineraryId  String
  itinerary    Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)

  @@map("day_plans")
}

model Booking {
  id          String        @id @default(cuid())
  type        BookingType
  status      BookingStatus @default(PENDING)
  totalPrice  Float
  participants Int
  startDate   DateTime
  endDate     DateTime?
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  itineraryId String?
  itinerary   Itinerary?    @relation(fields: [itineraryId], references: [id])
  packageId   String?
  package     Package?      @relation(fields: [packageId], references: [id])
  payment     Payment?

  @@map("bookings")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  stripePaymentId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  bookingId     String        @unique
  booking       Booking       @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations - can review either user, itinerary, or package
  authorId    String
  author      User       @relation("ReviewAuthor", fields: [authorId], references: [id])
  userId      String?
  user        User?      @relation(fields: [userId], references: [id])
  itineraryId String?
  itinerary   Itinerary? @relation(fields: [itineraryId], references: [id])
  packageId   String?
  package     Package?   @relation(fields: [packageId], references: [id])

  @@map("reviews")
}

model Conversation {
  id          String   @id @default(cuid())
  title       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String @id @default(cuid())
  userId         String
  conversationId String

  // Relations
  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@unique([userId, conversationId])
  @@map("conversation_participants")
}

model Message {
  id             String   @id @default(cuid())
  content        String
  createdAt      DateTime @default(now())

  // Relations
  senderId       String
  sender         User         @relation(fields: [senderId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@map("messages")
}

enum TravelCategory {
  BUDGET
  NATURE
  CULTURE
  CITY
  SPORT
  RELAX
  ADVENTURE
  LUXURY
  FAMILY
  SOLO
}

enum PackageType {
  ACCOMMODATION
  TRANSPORT
  MEAL
  TOUR
  ACTIVITY
  GUIDE
}

enum BookingType {
  ITINERARY
  PACKAGE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}
